20,21d19
< local schema_def = require("apisix.schema_def")
< local auth_utils = require("apisix.utils.auth")
22a21
> 
37,38c36
<         },
<         anonymous_consumer = schema_def.anonymous_consumer_schema,
---
>         }
71c69
< local function find_consumer(ctx, conf)
---
> function _M.rewrite(conf, ctx)
82c80
<         return nil, nil, "Missing API key found in request"
---
>         return 401, {message = "Missing API key in request"}
85c83,89
<     local consumer, consumer_conf, err = consumer_mod.find_consumer(plugin_name, "key", key, ctx)
---
>     local consumer_conf = consumer_mod.plugin(plugin_name)
>     if not consumer_conf then
>         return 401, {message = "Missing related consumer"}
>     end
> 
>     local consumers = consumer_mod.consumers_kv(plugin_name, consumer_conf, "key")
>     local consumer = consumers[key]
87,92c91
<         err = "failed to find consumer: " .. (err or "invalid api key")
<         if auth_utils.is_running_under_multi_auth(ctx) then
<             return nil, nil, err
<         end
<         core.log.warn(err)
<         return nil, nil, "Invalid API key in request"
---
>         return 401, {message = "Invalid API key in request"}
93a93
>     core.log.info("consumer: ", core.json.delay_encode(consumer))
105,125d104
<     return consumer, consumer_conf
< end
< 
< 
< function _M.rewrite(conf, ctx)
<     local consumer, consumer_conf, err = find_consumer(ctx, conf)
<     if not consumer then
<         if not conf.anonymous_consumer then
<             return 401, { message = err}
<         end
<         consumer, consumer_conf, err = consumer_mod.get_anonymous_consumer(conf.anonymous_consumer)
<         if not consumer then
<             if auth_utils.is_running_under_multi_auth(ctx) then
<                 return 401, err
<             end
<             core.log.error(err)
<             return 401, { message = "Invalid user authorization"}
<         end
<     end
< 
<     core.log.info("consumer: ", core.json.delay_encode(consumer))
