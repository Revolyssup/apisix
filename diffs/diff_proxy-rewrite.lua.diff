23a24,25
> local re_match    = ngx.re.match
> local req_set_uri = ngx.req.set_uri
43a46,49
> core.ctx.register_var("proxy_rewrite_regex_uri_captures", function(ctx)
>     return ctx.proxy_rewrite_regex_uri_captures
> end)
> 
63d68
<             maxItems    = 2,
189,193c194,195
<         local _, _, err = re_sub("/fake_uri", conf.regex_uri[1],
<                                    conf.regex_uri[2], "jo")
<         if err then
<             return false, "invalid regex_uri(" .. conf.regex_uri[1] ..
<                             ", " .. conf.regex_uri[2] .. "): " .. err
---
>         if (#conf.regex_uri % 2 ~= 0) then
>             return false, "The length of regex_uri should be an even number"
194a197,204
>         for i = 1, #conf.regex_uri, 2 do
>             local _, _, err = re_sub("/fake_uri", conf.regex_uri[i],
>                 conf.regex_uri[i + 1], "jo")
>             if err then
>                 return false, "invalid regex_uri(" .. conf.regex_uri[i] ..
>                     ", " .. conf.regex_uri[i + 1] .. "): " .. err
>             end
>         end
259a270
> 
271c282,284
<     elseif conf.uri ~= nil then
---
>     end
> 
>     if conf.uri ~= nil then
273a287
> 
279,288c293,316
<         local uri, _, err = re_sub(upstream_uri, conf.regex_uri[1],
<                                    conf.regex_uri[2], "jo")
<         if uri then
<             upstream_uri = uri
<         else
<             local msg = "failed to substitute the uri " .. ctx.var.uri ..
<                         " (" .. conf.regex_uri[1] .. ") with " ..
<                         conf.regex_uri[2] .. " : " .. err
<             core.log.error(msg)
<             return 500, {message = msg}
---
>         local error_msg
>         for i = 1, #conf.regex_uri, 2 do
>             local captures, err = re_match(upstream_uri, conf.regex_uri[i], "jo")
>             if err then
>                 error_msg = "failed to match the uri " .. ctx.var.uri ..
>                     " (" .. conf.regex_uri[i] .. ") " .. " : " .. err
>                 break
>             end
> 
>             if captures then
>                 ctx.proxy_rewrite_regex_uri_captures = captures
> 
>                 local uri, _, err = re_sub(upstream_uri,
>                     conf.regex_uri[i], conf.regex_uri[i + 1], "jo")
>                 if uri then
>                     upstream_uri = uri
>                 else
>                     error_msg = "failed to substitute the uri " .. ngx.var.uri ..
>                         " (" .. conf.regex_uri[i] .. ") with " ..
>                         conf.regex_uri[i + 1] .. " : " .. err
>                 end
> 
>                 break
>             end
289a318,322
> 
>         if error_msg ~= nil then
>             core.log.error(error_msg)
>             return 500, { error_msg = error_msg }
>         end
306a340,341
>         req_set_uri(upstream_uri)
> 
315a351,352
>     else
>         ctx.var.upstream_uri = upstream_uri
328,330c365,372
<             local val = core.utils.resolve_var(hdr_op.add[i + 1], ctx.var)
<             local header = hdr_op.add[i]
<             core.request.add_header(ctx, header, val)
---
>             local val = core.utils.resolve_var_with_captures(hdr_op.add[i + 1],
>                                             ctx.proxy_rewrite_regex_uri_captures)
>             val = core.utils.resolve_var(val, ctx.var)
>             -- A nil or empty table value will cause add_header function to throw an error.
>             if val then
>                 local header = hdr_op.add[i]
>                 core.request.add_header(ctx, header, val)
>             end
335c377,379
<             local val = core.utils.resolve_var(hdr_op.set[i + 1], ctx.var)
---
>             local val = core.utils.resolve_var_with_captures(hdr_op.set[i + 1],
>                                             ctx.proxy_rewrite_regex_uri_captures)
>             val = core.utils.resolve_var(val, ctx.var)
