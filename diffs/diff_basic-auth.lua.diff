21,23d20
< local schema_def = require("apisix.schema_def")
< local auth_utils = require("apisix.utils.auth")
< 
37d33
<     anonymous_consumer = schema_def.anonymous_consumer_schema,
127c123,126
< local function find_consumer(ctx)
---
> function _M.rewrite(conf, ctx)
>     core.log.info("plugin access phase, conf: ", core.json.delay_encode(conf))
> 
>     -- 1. extract authorization from header
131c130
<         return nil, nil, "Missing authorization in request"
---
>         return 401, { message = "Missing authorization in request" }
136,138d134
<         if auth_utils.is_running_under_multi_auth(ctx) then
<             return nil, nil, err
<         end
140c136
<         return nil, nil, "Invalid authorization in request"
---
>         return 401, { message = "Invalid authorization in request" }
143,151c139,142
<     local cur_consumer, consumer_conf, err = consumer.find_consumer(plugin_name,
<                                              "username", username)
<     if not cur_consumer then
<         err = "failed to find user: " .. (err or "invalid user")
<         if auth_utils.is_running_under_multi_auth(ctx) then
<             return nil, nil, err
<         end
<         core.log.warn(err)
<         return nil, nil, "Invalid user authorization"
---
>     -- 2. get user info from consumer plugin
>     local consumer_conf = consumer.plugin(plugin_name)
>     if not consumer_conf then
>         return 401, { message = "Missing related consumer" }
154,156c145
<     if cur_consumer.auth_conf.password ~= password then
<         return nil, nil, "Invalid user authorization"
<     end
---
>     local consumers = consumer.consumers_kv(plugin_name, consumer_conf, "username")
158,165c147,148
<     return cur_consumer, consumer_conf, err
< end
< 
< 
< function _M.rewrite(conf, ctx)
<     core.log.info("plugin access phase, conf: ", core.json.delay_encode(conf))
< 
<     local cur_consumer, consumer_conf, err = find_consumer(ctx)
---
>     -- 3. check user exists
>     local cur_consumer = consumers[username]
167,177c150
<         if not conf.anonymous_consumer then
<             return 401, { message = err }
<         end
<         cur_consumer, consumer_conf, err = consumer.get_anonymous_consumer(conf.anonymous_consumer)
<         if not cur_consumer then
<             if auth_utils.is_running_under_multi_auth(ctx) then
<                 return 401, err
<             end
<             core.log.error(err)
<             return 401, { message = "Invalid user authorization" }
<         end
---
>         return 401, { message = "Invalid user authorization" }
179d151
< 
181a154,160
> 
>     -- 4. check the password is correct
>     if cur_consumer.auth_conf.password ~= password then
>         return 401, { message = "Invalid user authorization" }
>     end
> 
>     -- 5. hide `Authorization` request header if `hide_credentials` is `true`
